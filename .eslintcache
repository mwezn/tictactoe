[{"/home/mrwez/Desktop/tictactoe/src/index.js":"1","/home/mrwez/Desktop/tictactoe/src/reportWebVitals.js":"2","/home/mrwez/Desktop/tictactoe/src/App.js":"3","/home/mrwez/Desktop/tictactoe/src/components/aip2.js":"4","/home/mrwez/Desktop/tictactoe/src/components/Nav.js":"5","/home/mrwez/Desktop/tictactoe/src/components/connect4.js":"6","/home/mrwez/Desktop/tictactoe/src/components/fullGame.js":"7","/home/mrwez/Desktop/tictactoe/src/components/five.js":"8","/home/mrwez/Desktop/tictactoe/src/components/combos.js":"9"},{"size":545,"mtime":1651392907357,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1647172153628,"results":"12","hashOfConfig":"11"},{"size":529,"mtime":1663839179348,"results":"13","hashOfConfig":"11"},{"size":6424,"mtime":1656095458784,"results":"14","hashOfConfig":"11"},{"size":309,"mtime":1656093865732,"results":"15","hashOfConfig":"11"},{"size":7300,"mtime":1665471233104,"results":"16","hashOfConfig":"11"},{"size":4661,"mtime":1656095482959,"results":"17","hashOfConfig":"11"},{"size":5343,"mtime":1660376145408,"results":"18","hashOfConfig":"11"},{"size":2262,"mtime":1656151787851,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"tr52sf",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"/home/mrwez/Desktop/tictactoe/src/index.js",[],["43","44"],"/home/mrwez/Desktop/tictactoe/src/reportWebVitals.js",[],"/home/mrwez/Desktop/tictactoe/src/App.js",[],"/home/mrwez/Desktop/tictactoe/src/components/aip2.js",["45","46","47","48","49","50","51"],"import React from 'react'\nimport Nav from './Nav'\nlet human=\"X\"\nlet ai=\"O\"\n\nlet memo;\nfunction Square(props) {\n  return (\n    <button className={props.value==\"X\"?\"square colourR \": \"square colourB\"} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nconst initialState={squares:Array(25).fill(null),player:\"X\",speed:1000,OIsNext:null,XIsNext:null}\n\nclass Board extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={...initialState}; //Prevents Mutation?!\n    \n  }\n  reset=this.reset.bind(this); //This is needed for reset\n  startAi=this.startAi.bind(this)\n  bestMove=this.bestMove.bind(this)\n  worstMove=this.worstMove.bind(this)\n\nbestMove(board){\n    let worstScore=-100;\n    let worst;\n  for (let i=0;i< 25;i++){\n    if (board[i]==null){\n        board[i]=human;\n        let score=miniMax1(human,ai,board,memo={},0,false);\n        board[i]=null;\n        if (score>worstScore){\n            worst=i;\n            worstScore=score;\n        }\n    }\n   }\n   board[worst]=human;\n   this.setState({squares:board, player:ai})\n   let sq2=this.state.squares.slice()\n  \n   const makeWorseMove=setTimeout(()=>this.worstMove(sq2),this.state.speed);\n   this.setState({OIsNext: makeWorseMove})\n}\n\n  \n\n  worstMove(board){\n    let bestScore=100;\n    \n    let bestmove;\n    for (let i=0;i<25;i++){\n      if (board[i]==null){\n         board[i]=ai;\n         let score=miniMax1(human,ai,board,memo={},0,true);\n         board[i]=null;\n         if (score<bestScore){\n          bestmove=i\n          bestScore=score;\n          \n         }\n      }\n    }\n    board[bestmove]=ai;\n    this.setState({squares:board,player:human})\n    let sq=this.state.squares.slice()\n    const makeBestMove= setTimeout(()=>this.bestMove(sq),this.state.speed);\n    this.setState({XIsNext: makeBestMove})\n}\n\n\n  startAi(){\n    \n    const sq=this.state.squares.slice()\n    let i=Math.floor(Math.random()*25) //We randomly choose an empty square for X\n    if (sq[i]==null){\n      sq[i]=human;\n    \n      this.setState({\n        squares:sq,player:ai\n      })\n    }\n    setTimeout(()=>this.worstMove(sq),this.state.speed)\n  \n    \n  }\n  renderSquare(i) {\n   \n    return <Square value={this.state.squares[i]} />;\n  }\n  reset(){\n    this.setState(initialState);\n    clearTimeout(this.state.XIsNext);\n    clearTimeout(this.state.OIsNext)\n  }\n\n  speed(){\n    let speed=document.getElementById('speed').value;\n    this.setState({speed: Number(speed)})\n\n  }\n\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    let playerTurn=this.state.player;\n    if (winner) {\n      console.log(winner);\n      status = <div className={winner==\"X\"?\"colourRWin\":\"colourBWin\"}>Winner!{winner}</div>\n      clearTimeout(this.state.XIsNext);\n      clearTimeout(this.state.OIsNext)\n    } \n\n    return (\n      <div className=\"container\">\n        <div className=\"status\">{status}</div>\n        <div className=\"choice\" id=\"choice\">\n            <h2>Computer vs Computer: {playerTurn}'s turn</h2>\n            <button onClick={()=>this.startAi()}>Start AI Game</button>\n            <select id=\"speed\" onChange={()=>this.speed()}>\n              <option value=\"200\">200ms</option>\n              <option value=\"400\">400ms</option>\n              <option value=\"600\">600ms</option>\n              <option value=\"800\">800ms</option>\n              <option value=\"1000\">1s</option>\n              <option value=\"2000\">2s</option>\n            </select>\n        </div>\n        <button onClick={()=>this.reset()}>Reset</button>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n        </div>\n        <div className=\"board-row\">\n          \n          {this.renderSquare(5)}\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n          {this.renderSquare(9)}\n        </div>\n        <div className=\"board-row\">\n          \n          {this.renderSquare(10)}\n          {this.renderSquare(11)}\n          {this.renderSquare(12)}\n          {this.renderSquare(13)}\n          {this.renderSquare(14)}\n      \n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(15)}\n          {this.renderSquare(16)}\n          {this.renderSquare(17)}\n          {this.renderSquare(18)}\n          {this.renderSquare(19)}\n         \n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(20)}\n          {this.renderSquare(21)}\n          {this.renderSquare(22)}\n          {this.renderSquare(23)}\n          {this.renderSquare(24)}\n         \n        </div>\n        \n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [4,9,14,19,24],\n      [0, 1, 2, 3, 4],\n      [5,6, 7,8,9],\n      [10,11, 12 ,13, 14],\n      [15, 16, 17 ,18,19],\n      [20, 21 ,22 ,23,24],\n      [0,5,10,15,20],\n    [1,6,11,16,21],\n    [2,7,12,17,22],\n    [3,8,13,18,23],\n    [0,6,12,18,24],\n    [4, 8,12, 16,20]\n      \n    ];\n    \n    for (let i = 0; i < lines.length; i++) {\n      var [a, b, c, d, e] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c] && squares[c] ===squares[d] && squares[d]==squares[e]) {\n        return squares[a];\n      }\n      else if(!squares.includes(null)) return \"TIE\"\n    }\n    return null;\n  }\n function miniMax1(human,ai,board,memo={},depth,Max){\n   if (depth in memo) return memo[depth]\n  let res=calculateWinner(board);\n  if (res!==null){\n    let score=res==human?100:res==ai?-100:0;\n    return score\n  }\n  \n  if(Max){\n    let best=-100\n    for (let i=0;i<25;i++){\n      if (board[i]==null){\n        board[i]=human;\n        var score=miniMax1(human,ai,board,memo,depth+1,false);\n        board[i]=null\n        best=Math.max(best,score);\n        memo[depth]=best\n      }\n    }\n    return memo[depth]\n  }\n  else{\n    let best=100\n    for (let i=0;i<25;i++){\n      if(board[i]==null){\n        board[i]=ai;\n        var score=miniMax1(human,ai,board,memo,depth+1,true);\n        board[i]=null\n        best=Math.min(best,score);\n        memo[depth]=best\n      }\n    }\n    return memo[depth]\n    \n  }\n}\n\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div>\n        <Nav></Nav>\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default Game\n","/home/mrwez/Desktop/tictactoe/src/components/Nav.js",[],"/home/mrwez/Desktop/tictactoe/src/components/connect4.js",["52","53","54","55","56","57","58","59"],"/home/mrwez/Desktop/tictactoe/src/components/fullGame.js",["60","61","62","63","64","65"],"import React from 'react';\nimport Nav from './Nav'\n\nfunction Square(props) {\n  return (\n    <button className={props.value==\"X\"?\"square colourR \": \"square colourB\"} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\n\nconst initialState={squares:Array(9).fill(null),human:\"\",ai:\"\"}\n\nclass Board extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={...initialState}; //Prevents Mutation?!\n    \n  }\n  reset=this.reset.bind(this); //This is needed for reset\n  choosePlayer(e){\n      let player=e.target.value;\n      console.log(player)\n      e.target.value==\"X\"?this.setState({human:\"X\",ai:\"O\"}):this.setState({human:\"O\",ai:\"X\"})\n      \n      \n      let parentDiv=document.getElementById('choice')\n      console.log(parentDiv)\n      parentDiv.style.display=\"none\";\n      let btn=document.getElementById('resetbtn')\n      btn.style.display=\"\";\n  }\n  reset(){\n    this.setState(initialState);\n    let parentDiv=document.getElementById('choice')\n    parentDiv.style.display=\"\";\n    let btn=document.getElementById('resetbtn')\n    btn.style.display=\"none\";\n  }\n\n  bestMove(board){\n    let bestScore=Infinity;\n    let bestmove;\n    for (let i=0;i<9;i++){\n      if (board[i]==null){\n         board[i]=this.state.ai;\n         let score=miniMax1(this.state.human,this.state.ai,board,0,true)\n         board[i]=null;\n         console.log(score)\n         if (score<bestScore){\n          bestmove=i\n          bestScore=score;\n          \n         }\n      }\n    }\n    board[bestmove]=this.state.ai;\n}\n\n  handleClick(i){\n    const sq=this.state.squares.slice()\n    if (sq[i]==null){\n      sq[i]=this.state.human\n    \n      this.setState({\n        squares:sq,\n        //xIsNext:!this.state.xIsNext,\n      })\n    setTimeout(this.bestMove(sq),500)\n    }\n    return;\n    \n  }\n  renderSquare(i) {\n   \n    return <Square value={this.state.squares[i]} onClick={()=>this.handleClick(i)} />;\n  }\n \n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      console.log(winner);\n      status = <div className={winner==\"X\"?\"colourRWin\":winner==\"O\"?\"colourBWin\":\"colourG\"}>Winner!{winner}</div>\n    }\n    let player=this.state.human!==\"\"?<h2>You are {this.state.human}</h2>:<h2>Choose a player</h2>\n\n    return (\n      <div className=\"container\">\n        {player}\n        \n        <div className=\"status\">{status}</div>\n        <div className=\"choice\" id=\"choice\">\n            \n            <button className=\"btn btn-danger\" value=\"X\" onClick={(e)=>this.choosePlayer(e)}>X</button>\n            <button className=\"btn btn-primary\" value=\"O\" onClick={(e)=>this.choosePlayer(e)}>O</button>\n        </div>\n        <button id=\"resetbtn\" onClick={this.reset}>Reset</button>\n        <div>Click on a square:</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div>\n        <Nav></Nav>\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\nfunction calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n      else if(!squares.includes(null)) return \"TIE\"\n    }\n    return null;\n  }\n function miniMax1(human,ai,board,depth,Max){\n  let res=calculateWinner(board);\n  if (res!==null){\n    let score=res==human?10:res==ai?-10:0;\n    return score\n  }\n  \n  if(Max){\n    let best=-Infinity\n    for (let i=0;i<9;i++){\n      if (board[i]==null){\n        board[i]=human;\n        var score=miniMax1(human,ai,board,depth+1,false);\n        board[i]=null\n        best=Math.max(best,score);\n      }\n    }\n    return best\n  }\n  else{\n    let best=Infinity\n    for (let i=0;i<9;i++){\n      if(board[i]==null){\n        board[i]=ai;\n        score=miniMax1(human,ai,board,depth+1,true);\n        board[i]=null\n        best=Math.min(best,score);\n      }\n    }\n    return best\n    \n  }\n}\n\nexport default Game;\n","/home/mrwez/Desktop/tictactoe/src/components/five.js",["66","67","68","69","70","71","72"],"import React from 'react'\nimport Nav from './Nav'\n\nlet memo;\nfunction Square(props) {\n  return (\n    <button className={props.value==\"X\"?\"square colourR \": \"square colourB\"} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nconst initialState={squares:Array(25).fill(null),human:\"\",ai:\"\"}\n\nclass Board extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={...initialState}; //Prevents Mutation?!\n    \n  }\n  reset=this.reset.bind(this); //This is needed for reset\n\n  choosePlayer(e){\n    let player=e.target.value;\n    console.log(player)\n    e.target.value==\"X\"?this.setState({human:\"X\",ai:\"O\"}):this.setState({human:\"O\",ai:\"X\"})\n    let parentDiv=document.getElementById('choice')\n    console.log(parentDiv)\n    parentDiv.style.display=\"none\";\n}\n \n\n\n  \n\n  bestMove(board){\n    let bestScore=100;\n    let bestmove;\n    for (let i=0;i<25;i++){\n      if (board[i]==null){\n         board[i]=this.state.ai;\n         let score=miniMax1(this.state.human,this.state.ai,board,memo={},0,true);\n         board[i]=null;\n         if (score<bestScore){\n          bestmove=i\n          bestScore=score;\n          \n         }\n      }\n    }\n    board[bestmove]=this.state.ai;\n}\n\n  handleClick(i){\n    const sq=this.state.squares.slice()\n    if (sq[i]==null){\n      sq[i]=this.state.human\n    \n      this.setState({\n        squares:sq\n      })\n    setTimeout(this.bestMove(sq),500)\n    }\n    return;\n    \n  }\n  renderSquare(i) {\n   \n    return <Square value={this.state.squares[i]} onClick={()=>this.handleClick(i)} />;\n  }\n  reset(){\n    this.setState(initialState);\n    let parentDiv=document.getElementById('choice');\n    parentDiv.style.display=\"\";\n    \n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      console.log(winner);\n      status = <div className={winner==\"X\"?\"colourRWin\":\"colourBWin\"}>Winner!{winner}</div>\n    } \n\n    return (\n      <div className=\"container\">\n        <div className=\"status\">{status}</div>\n        <div className=\"choice\" id=\"choice\">\n            <h2>Choose a player</h2>\n            <button className=\"btn btn-danger\" value=\"X\" onClick={(e)=>this.choosePlayer(e)}>X</button>\n            <button className=\"btn btn-primary\" value=\"O\" onClick={(e)=>this.choosePlayer(e)}>O</button>\n        </div>\n        <button onClick={this.reset}>Reset</button>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n        </div>\n        <div className=\"board-row\">\n          \n          {this.renderSquare(5)}\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n          {this.renderSquare(9)}\n        </div>\n        <div className=\"board-row\">\n          \n          {this.renderSquare(10)}\n          {this.renderSquare(11)}\n          {this.renderSquare(12)}\n          {this.renderSquare(13)}\n          {this.renderSquare(14)}\n      \n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(15)}\n          {this.renderSquare(16)}\n          {this.renderSquare(17)}\n          {this.renderSquare(18)}\n          {this.renderSquare(19)}\n         \n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(20)}\n          {this.renderSquare(21)}\n          {this.renderSquare(22)}\n          {this.renderSquare(23)}\n          {this.renderSquare(24)}\n         \n        </div>\n        \n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = \n  \n    [ [4,9,14,19,24], //this seems to work better here instead of below?\n      [0, 1, 2, 3, 4],\n      [5,6, 7,8,9],\n      [10,11, 12 ,13, 14],\n      [15, 16, 17 ,18,19],\n      [20, 21 ,22 ,23,24],\n      [0,5,10,15,20],\n    [1,6,11,16,21],\n    [2,7,12,17,22],\n    [3,8,13,18,23],\n    [0,6,12,18,24],\n    [4, 8,12, 16,20]\n      \n    ];\n    \n    for (let i = 0; i < lines.length; i++) {\n      var [a, b, c, d, e] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c] && squares[c] ===squares[d] && squares[d]===squares[e]) {\n        return squares[a];\n      }\n      else if(!squares.includes(null)) return \"TIE\"\n    }\n    return null;\n  }\n function miniMax1(human,ai,board,memo={},depth,Max){\n   if (depth in memo) return memo[depth]\n  let res=calculateWinner(board);\n  if (res!==null){\n    let score=res==human?100:res==ai?-100:0;\n    return score\n  }\n  \n  if(Max){\n    let best=-100\n    for (let i=0;i<25;i++){\n      if (board[i]==null){\n        board[i]=human;\n        var score=miniMax1(human,ai,board,memo,depth+1,false);\n        board[i]=null\n        best=Math.max(best,score);\n        memo[depth]=best\n      }\n    }\n    return memo[depth]\n  }\n  else{\n    let best=100\n    for (let i=0;i<25;i++){\n      if(board[i]==null){\n        board[i]=ai;\n        var score=miniMax1(human,ai,board,memo,depth+1,true);\n        board[i]=null\n        best=Math.min(best,score);\n        memo[depth]=best\n      }\n    }\n    return memo[depth]\n    \n  }\n}\n\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div>\n        <Nav></Nav>\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default Game\n\n","/home/mrwez/Desktop/tictactoe/src/components/combos.js",["73","74"],"let squares= Array(42).fill(null)\nlet indices=squares.map((d,i)=>i)\n\n//my algorithm for connect4 possible row/col combinations\n\nfunction slice4(d){\n  let arr=[]\n  let i=0;\n  while(i+4<=d.length){\n    arr.push(d.slice(i,i+4))\n    i++;\n  }\n  return arr;\n}\n\n\nconst rows =()=>{\n  let r=[]\n  for (let j=0;j<42;j+=7){  \n    let res=[]\n    for (let i=j;i<=j+6;i++){\n      res.push(i)\n    }\n    r.push(res)\n  }\n  return r\n}\n\nconst cols =()=>{\n  let c=[]\n  for (let i=0;i<=6;i++){\n    let res=[]\n    for (let j=i;j<42;j+=7){\n      res.push(j)\n    }\n    c.push(res)\n  }\n  return c\n}\n\n/*console.log(cols());\nlet combos={row:[... rows()], col:[... cols()]}\nconsole.log(combos)*/\n\nconst winningArrays = [\n  [0, 1, 2, 3],\n  [41, 40, 39, 38],\n  [7, 8, 9, 10],\n  [34, 33, 32, 31],\n  [14, 15, 16, 17],\n  [27, 26, 25, 24],\n  [21, 22, 23, 24],\n  [20, 19, 18, 17],\n  [28, 29, 30, 31],\n  [13, 12, 11, 10],\n  [35, 36, 37, 38],\n  [6, 5, 4, 3],\n  [0, 7, 14, 21],\n  [41, 34, 27, 20],\n  [1, 8, 15, 22],\n  [40, 33, 26, 19],\n  [2, 9, 16, 23],\n  [39, 32, 25, 18],\n  [3, 10, 17, 24],\n  [38, 31, 24, 17],\n  [4, 11, 18, 25],\n  [37, 30, 23, 16],\n  [5, 12, 19, 26],\n  [36, 29, 22, 15],\n  [6, 13, 20, 27],\n  [35, 28, 21, 14],\n  [0, 8, 16, 24],\n  [41, 33, 25, 17],\n  [7, 15, 23, 31],\n  [34, 26, 18, 10],\n  [14, 22, 30, 38],\n  [27, 19, 11, 3],\n  [35, 29, 23, 17],\n  [6, 12, 18, 24],\n  [28, 22, 16, 10],\n  [13, 19, 25, 31],\n  [21, 15, 9, 3],\n  [20, 26, 32, 38],\n  [36, 30, 24, 18],\n  [5, 11, 17, 23],\n  [37, 31, 25, 19],\n  [4, 10, 16, 22],\n  [2, 10, 18, 26],\n  [39, 31, 23, 15],\n  [1, 9, 17, 25],\n  [40, 32, 24, 16],\n  [9, 17, 25, 33],\n  [8, 16, 24, 32],\n  [11, 17, 23, 29],\n  [12, 18, 24, 30],\n  [1, 2, 3, 4],\n  [5, 4, 3, 2],\n  [8, 9, 10, 11],\n  [12, 11, 10, 9],\n  [15, 16, 17, 18],\n  [19, 18, 17, 16],\n  [22, 23, 24, 25],\n  [26, 25, 24, 23],\n  [29, 30, 31, 32],\n  [33, 32, 31, 30],\n  [36, 37, 38, 39],\n  [40, 39, 38, 37],\n  [7, 14, 21, 28],\n  [8, 15, 22, 29],\n  [9, 16, 23, 30],\n  [10, 17, 24, 31],\n  [11, 18, 25, 32],\n  [12, 19, 26, 33],\n  [13, 20, 27, 34],\n]\n\nlet r=rows();\nlet res=r.map(d=> slice4(d))\nlet c=cols();\nlet res2=c.map(d=> slice4(d))\nlet combos={row:res, col:res2}\nlet mycombos= [...res, ...res2]\nconsole.log(winningArrays.length)\n\n\n\n\nmodule.exports= {mycombos, winningArrays};\n\n\n\n\n\n",{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":9,"column":35,"nodeType":"81","messageId":"82","endLine":9,"endColumn":37},{"ruleId":"83","severity":1,"message":"84","line":59,"column":44,"nodeType":"85","messageId":"86","endLine":59,"endColumn":48},{"ruleId":"79","severity":1,"message":"80","line":114,"column":38,"nodeType":"81","messageId":"82","endLine":114,"endColumn":40},{"ruleId":"79","severity":1,"message":"80","line":200,"column":121,"nodeType":"81","messageId":"82","endLine":200,"endColumn":123},{"ruleId":"79","severity":1,"message":"80","line":211,"column":18,"nodeType":"81","messageId":"82","endLine":211,"endColumn":20},{"ruleId":"79","severity":1,"message":"80","line":211,"column":33,"nodeType":"81","messageId":"82","endLine":211,"endColumn":35},{"ruleId":"87","severity":1,"message":"88","line":233,"column":13,"nodeType":"85","messageId":"89","endLine":233,"endColumn":18},{"ruleId":"79","severity":1,"message":"80","line":15,"column":49,"nodeType":"81","messageId":"82","endLine":15,"endColumn":51},{"ruleId":"79","severity":1,"message":"80","line":15,"column":84,"nodeType":"81","messageId":"82","endLine":15,"endColumn":86},{"ruleId":"83","severity":1,"message":"84","line":48,"column":46,"nodeType":"85","messageId":"86","endLine":48,"endColumn":50},{"ruleId":"79","severity":1,"message":"80","line":136,"column":40,"nodeType":"81","messageId":"82","endLine":136,"endColumn":42},{"ruleId":"79","severity":1,"message":"80","line":136,"column":65,"nodeType":"81","messageId":"82","endLine":136,"endColumn":67},{"ruleId":"79","severity":1,"message":"80","line":247,"column":19,"nodeType":"81","messageId":"82","endLine":247,"endColumn":21},{"ruleId":"79","severity":1,"message":"80","line":247,"column":34,"nodeType":"81","messageId":"82","endLine":247,"endColumn":36},{"ruleId":"87","severity":1,"message":"88","line":269,"column":14,"nodeType":"85","messageId":"89","endLine":269,"endColumn":19},{"ruleId":"79","severity":1,"message":"80","line":6,"column":35,"nodeType":"81","messageId":"82","endLine":6,"endColumn":37},{"ruleId":"79","severity":1,"message":"80","line":25,"column":21,"nodeType":"81","messageId":"82","endLine":25,"endColumn":23},{"ruleId":"79","severity":1,"message":"80","line":86,"column":38,"nodeType":"81","messageId":"82","endLine":86,"endColumn":40},{"ruleId":"79","severity":1,"message":"80","line":86,"column":63,"nodeType":"81","messageId":"82","endLine":86,"endColumn":65},{"ruleId":"79","severity":1,"message":"80","line":159,"column":18,"nodeType":"81","messageId":"82","endLine":159,"endColumn":20},{"ruleId":"79","severity":1,"message":"80","line":159,"column":32,"nodeType":"81","messageId":"82","endLine":159,"endColumn":34},{"ruleId":"79","severity":1,"message":"80","line":7,"column":35,"nodeType":"81","messageId":"82","endLine":7,"endColumn":37},{"ruleId":"79","severity":1,"message":"80","line":26,"column":19,"nodeType":"81","messageId":"82","endLine":26,"endColumn":21},{"ruleId":"83","severity":1,"message":"84","line":42,"column":66,"nodeType":"85","messageId":"86","endLine":42,"endColumn":70},{"ruleId":"79","severity":1,"message":"80","line":83,"column":38,"nodeType":"81","messageId":"82","endLine":83,"endColumn":40},{"ruleId":"79","severity":1,"message":"80","line":172,"column":18,"nodeType":"81","messageId":"82","endLine":172,"endColumn":20},{"ruleId":"79","severity":1,"message":"80","line":172,"column":33,"nodeType":"81","messageId":"82","endLine":172,"endColumn":35},{"ruleId":"87","severity":1,"message":"88","line":194,"column":13,"nodeType":"85","messageId":"89","endLine":194,"endColumn":18},{"ruleId":"83","severity":1,"message":"90","line":2,"column":5,"nodeType":"85","messageId":"86","endLine":2,"endColumn":12},{"ruleId":"83","severity":1,"message":"91","line":121,"column":5,"nodeType":"85","messageId":"86","endLine":121,"endColumn":11},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'memo' is assigned a value but never used.","Identifier","unusedVar","no-redeclare","'score' is already defined.","redeclared","'indices' is assigned a value but never used.","'combos' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]