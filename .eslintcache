[{"/home/mrwez/Desktop/tictactoe/src/index.js":"1","/home/mrwez/Desktop/tictactoe/src/reportWebVitals.js":"2","/home/mrwez/Desktop/tictactoe/src/App.js":"3","/home/mrwez/Desktop/tictactoe/src/components/aip2.js":"4","/home/mrwez/Desktop/tictactoe/src/components/Nav.js":"5","/home/mrwez/Desktop/tictactoe/src/components/connect4.js":"6","/home/mrwez/Desktop/tictactoe/src/components/fullGame.js":"7","/home/mrwez/Desktop/tictactoe/src/components/five.js":"8","/home/mrwez/Desktop/tictactoe/src/components/combos.js":"9"},{"size":545,"mtime":1651392907357,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1647172153628,"results":"12","hashOfConfig":"11"},{"size":529,"mtime":1663839179348,"results":"13","hashOfConfig":"11"},{"size":6429,"mtime":1668843204158,"results":"14","hashOfConfig":"11"},{"size":309,"mtime":1656093865732,"results":"15","hashOfConfig":"11"},{"size":8354,"mtime":1673685309640,"results":"16","hashOfConfig":"11"},{"size":4667,"mtime":1668843993824,"results":"17","hashOfConfig":"11"},{"size":5348,"mtime":1668843837991,"results":"18","hashOfConfig":"11"},{"size":2196,"mtime":1668843720701,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"tr52sf",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/mrwez/Desktop/tictactoe/src/index.js",[],["42","43"],"/home/mrwez/Desktop/tictactoe/src/reportWebVitals.js",[],"/home/mrwez/Desktop/tictactoe/src/App.js",[],"/home/mrwez/Desktop/tictactoe/src/components/aip2.js",["44"],"import React from 'react'\nimport Nav from './Nav'\nlet human=\"X\"\nlet ai=\"O\"\n\nlet memo;\nfunction Square(props) {\n  return (\n    <button className={props.value===\"X\"?\"square colourR \": \"square colourB\"} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nconst initialState={squares:Array(25).fill(null),player:\"X\",speed:1000,OIsNext:null,XIsNext:null}\n\nclass Board extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={...initialState}; //Prevents Mutation?!\n    \n  }\n  reset=this.reset.bind(this); //This is needed for reset\n  startAi=this.startAi.bind(this)\n  bestMove=this.bestMove.bind(this)\n  worstMove=this.worstMove.bind(this)\n\nbestMove(board){\n    let worstScore=-100;\n    let worst;\n  for (let i=0;i< 25;i++){\n    if (board[i]==null){\n        board[i]=human;\n        let score=miniMax1(human,ai,board,memo={},0,false);\n        board[i]=null;\n        if (score>worstScore){\n            worst=i;\n            worstScore=score;\n        }\n    }\n   }\n   board[worst]=human;\n   this.setState({squares:board, player:ai})\n   let sq2=this.state.squares.slice()\n  \n   const makeWorseMove=setTimeout(()=>this.worstMove(sq2),this.state.speed);\n   this.setState({OIsNext: makeWorseMove})\n}\n\n  \n\n  worstMove(board){\n    let bestScore=100;\n    \n    let bestmove;\n    for (let i=0;i<25;i++){\n      if (board[i]==null){\n         board[i]=ai;\n         let score=miniMax1(human,ai,board,memo={},0,true);\n         board[i]=null;\n         if (score<bestScore){\n          bestmove=i\n          bestScore=score;\n          \n         }\n      }\n    }\n    board[bestmove]=ai;\n    this.setState({squares:board,player:human})\n    let sq=this.state.squares.slice()\n    const makeBestMove= setTimeout(()=>this.bestMove(sq),this.state.speed);\n    this.setState({XIsNext: makeBestMove})\n}\n\n\n  startAi(){\n    \n    const sq=this.state.squares.slice()\n    let i=Math.floor(Math.random()*25) //We randomly choose an empty square for X\n    if (sq[i]==null){\n      sq[i]=human;\n    \n      this.setState({\n        squares:sq,player:ai\n      })\n    }\n    setTimeout(()=>this.worstMove(sq),this.state.speed)\n  \n    \n  }\n  renderSquare(i) {\n   \n    return <Square value={this.state.squares[i]} />;\n  }\n  reset(){\n    this.setState(initialState);\n    clearTimeout(this.state.XIsNext);\n    clearTimeout(this.state.OIsNext)\n  }\n\n  speed(){\n    let speed=document.getElementById('speed').value;\n    this.setState({speed: Number(speed)})\n\n  }\n\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    let playerTurn=this.state.player;\n    if (winner) {\n      console.log(winner);\n      status = <div className={winner===\"X\"?\"colourRWin\":\"colourBWin\"}>Winner!{winner}</div>\n      clearTimeout(this.state.XIsNext);\n      clearTimeout(this.state.OIsNext)\n    } \n\n    return (\n      <div className=\"container\">\n        <div className=\"status\">{status}</div>\n        <div className=\"choice\" id=\"choice\">\n            <h2>Computer vs Computer: {playerTurn}'s turn</h2>\n            <button onClick={()=>this.startAi()}>Start AI Game</button>\n            <select id=\"speed\" onChange={()=>this.speed()}>\n              <option value=\"200\">200ms</option>\n              <option value=\"400\">400ms</option>\n              <option value=\"600\">600ms</option>\n              <option value=\"800\">800ms</option>\n              <option value=\"1000\">1s</option>\n              <option value=\"2000\">2s</option>\n            </select>\n        </div>\n        <button onClick={()=>this.reset()}>Reset</button>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n        </div>\n        <div className=\"board-row\">\n          \n          {this.renderSquare(5)}\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n          {this.renderSquare(9)}\n        </div>\n        <div className=\"board-row\">\n          \n          {this.renderSquare(10)}\n          {this.renderSquare(11)}\n          {this.renderSquare(12)}\n          {this.renderSquare(13)}\n          {this.renderSquare(14)}\n      \n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(15)}\n          {this.renderSquare(16)}\n          {this.renderSquare(17)}\n          {this.renderSquare(18)}\n          {this.renderSquare(19)}\n         \n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(20)}\n          {this.renderSquare(21)}\n          {this.renderSquare(22)}\n          {this.renderSquare(23)}\n          {this.renderSquare(24)}\n         \n        </div>\n        \n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [4,9,14,19,24],\n      [0, 1, 2, 3, 4],\n      [5,6, 7,8,9],\n      [10,11, 12 ,13, 14],\n      [15, 16, 17 ,18,19],\n      [20, 21 ,22 ,23,24],\n      [0,5,10,15,20],\n    [1,6,11,16,21],\n    [2,7,12,17,22],\n    [3,8,13,18,23],\n    [0,6,12,18,24],\n    [4, 8,12, 16,20]\n      \n    ];\n    \n    for (let i = 0; i < lines.length; i++) {\n      var [a, b, c, d, e] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c] && squares[c] ===squares[d] && squares[d]===squares[e]) {\n        return squares[a];\n      }\n      else if(!squares.includes(null)) return \"TIE\"\n    }\n    return null;\n  }\n function miniMax1(human,ai,board,memo={},depth,Max){\n   if (depth in memo) return memo[depth]\n  let res=calculateWinner(board);\n  if (res!==null){\n    let score=res===human?100:res===ai?-100:0;\n    return score\n  }\n  \n  if(Max){\n    let best=-100\n    for (let i=0;i<25;i++){\n      if (board[i]==null){\n        board[i]=human;\n        var score=miniMax1(human,ai,board,memo,depth+1,false);\n        board[i]=null\n        best=Math.max(best,score);\n        memo[depth]=best\n      }\n    }\n    return memo[depth]\n  }\n  else{\n    let best=100\n    for (let i=0;i<25;i++){\n      if(board[i]==null){\n        board[i]=ai;\n        let score=miniMax1(human,ai,board,memo,depth+1,true);\n        board[i]=null\n        best=Math.min(best,score);\n        memo[depth]=best\n      }\n    }\n    return memo[depth]\n    \n  }\n}\n\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div>\n        <Nav></Nav>\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default Game\n","/home/mrwez/Desktop/tictactoe/src/components/Nav.js",[],"/home/mrwez/Desktop/tictactoe/src/components/connect4.js",["45","46","47","48","49","50"],"import React from 'react';\nimport Nav from './Nav'\n\nlet human='X';\nlet ai='O'\nlet initialState={squares: Array(42).fill(null)}\nlet memo;\nconst {mycombos, winningArrays}= require('./combos')\n\nconsole.log(mycombos,winningArrays)\n\n\nfunction Square(props) {\n  return (\n    <button id={props.id} className={props.value===\"X\"?\"circle Rcircle \":props.value===\"O\"?\"circle Ycircle\":\"circle playable\"} onClick={props.onClick} onMouseEnter={props.onHover} onMouseOut={props.onMouseOut} onTouchStart={props.onTouch}>\n      \n    </button>\n  );\n}\n\nfunction Square2(props) {\n  return (\n    <div className=\"topsquares\" id={props.id}>\n    </div>\n  );\n  }\n\n  const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\n\n\nclass Board extends React.Component {\n    constructor(props){\n      super(props);\n      this.state={...initialState}; //Prevents Mutation?!\n      \n    }\n    reset=this.reset.bind(this); //This is needed for reset\n  \n    \n    \n    async bestMove(board){\n      let bestScore=Infinity;\n      let bestmove;\n      for (let i=0;i<42;i++){\n        if (board[i]==null && board[i+7]!==null){\n           board[i]=ai;\n           let score=miniMax1(human,ai,board,memo={},0,true)\n           board[i]=null;\n           console.log(score)\n           if (score<bestScore){\n            bestmove=i\n            bestScore=score;\n            \n           }\n        }\n      }\n      let top=bestmove%7;\n      let n=top;\n      while(n<=top+bestmove){\n        let drop=document.getElementById(`square${n}`)\n        let prevdrop=document.getElementById(`square${n-7}`)\n        if (prevdrop) prevdrop.classList.remove('fall2')\n        drop.classList.add('fall2')\n        await sleep(50)\n        n+=7;\n      }\n      board[bestmove]=ai;\n      this.setState({\n        squares:board, \n      })\n  }\n  \n    async handleClick(i){\n      const sq=this.state.squares.slice()\n      let top=i%7;\n      let n=top;\n      \n      if (sq[i]==null && sq[i+7]!==null){\n        while(n<=top+i){\n          let drop=document.getElementById(`square${n}`)\n          let prevdrop=document.getElementById(`square${n-7}`)\n          if (prevdrop) prevdrop.classList.remove('fall')\n          drop.classList.add('fall')\n          await sleep(50)\n          n+=7;\n        }\n        sq[i]=human\n        \n        \n        this.bestMove(sq)\n        this.setState({\n          squares:sq, \n        })\n        \n        \n      }\n      else {\n        alert(\"Cant go Here\")\n      }\n      \n     \n      \n     \n  }\n    handleHover(i) {\n       console.log(`Hovered over square number: ${i} & this is ${i%7}mod7`)\n       let startTile=document.getElementById(i%7)\n       console.log(startTile)\n       startTile.classList.toggle('active')\n    }\n    handleMouseOut(i){\n       let startTile=document.getElementById(i%7)\n       console.log(startTile)\n       startTile.classList.toggle('active')\n\n    }\n\n\n    async OnTouchStart(i){\n      const sq=this.state.squares.slice()\n      let top=i%7;\n      let n=top;\n      \n      if (sq[i]==null && sq[i+7]!==null){\n        while(n<=top+i){\n          let drop=document.getElementById(`square${n}`)\n          let prevdrop=document.getElementById(`square${n-7}`)\n          if (prevdrop) prevdrop.classList.remove('fall')\n          drop.classList.add('fall')\n          await sleep(50)\n          n+=7;\n        }\n        sq[i]=human\n        \n        \n        this.bestMove(sq)\n        this.setState({\n          squares:sq, \n        })\n        \n        \n      }\n      else {\n        alert(\"Cant go Here\")\n      }\n    }\n    /*OnTouchEnd(i){\n      let startTile=document.getElementById(i%7)\n      alert(\"screen touch end!\")\n      startTile.classList.toggle('active')\n   }*/\n\n\n    renderSquare(i) {\n     \n      return <Square id={`square`+i} key={'square'+i} value={this.state.squares[i]} onClick={()=>this.handleClick(i)} onHover={()=>this.handleHover(i)} onMouseOut={()=>this.handleMouseOut(i)} onTouch={()=>this.OnTouchStart(i)} touchEnd={()=>this.OnTouchEnd(i)}/>\n    }\n\n    renderTopRow(){\n      let toprow=[]\n      for (let i=0;i<7;i++){\n        toprow.push(<Square2 id={i} key={i}></Square2>)\n      }\n      return toprow\n    }\n    \n    reset(){\n      this.setState(initialState);\n    }\n    \n  \n    render() {\n      const winner = c4Winner(this.state.squares);\n      \n      let status;\n      if (winner) {\n        console.log(winner);\n        status = <div className={winner==\"X\"?\"colourRWin\":winner==\"O\"?\"colourBWin\":\"colourG\"}>Winner!{winner}</div>\n      } \n\n    \n  \n      return (\n        <div className=\"container\">\n          \n          <div className=\"status\">{status}</div>\n          <button onClick={this.reset}>Reset</button>\n          <div>Click on a square:</div>\n          <div className=\"c4container\">\n          <div className='toprow'>\n            {this.renderTopRow()}\n          </div>\n          <div className='board-row'>\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n            {this.renderSquare(6)}\n          </div>\n          <div className='board-row'>\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n            {this.renderSquare(9)}\n            {this.renderSquare(10)}\n            {this.renderSquare(11)}\n            {this.renderSquare(12)}\n            {this.renderSquare(13)}\n          </div>\n          <div className='board-row'>\n            {this.renderSquare(14)}\n            {this.renderSquare(15)}\n            {this.renderSquare(16)}\n            {this.renderSquare(17)}\n            {this.renderSquare(18)}\n            {this.renderSquare(19)}\n            {this.renderSquare(20)}\n          </div>\n          <div className='board-row'>\n            {this.renderSquare(21)}\n            {this.renderSquare(22)}\n            {this.renderSquare(23)}\n            {this.renderSquare(24)}\n            {this.renderSquare(25)}\n            {this.renderSquare(26)}\n            {this.renderSquare(27)}\n          </div>\n          <div className='board-row'>\n            {this.renderSquare(28)}\n            {this.renderSquare(29)}\n            {this.renderSquare(30)}\n            {this.renderSquare(31)}\n            {this.renderSquare(32)}\n            {this.renderSquare(33)}\n            {this.renderSquare(34)}\n          </div>\n          <div className='board-row'>\n            {this.renderSquare(35)}\n            {this.renderSquare(36)}\n            {this.renderSquare(37)}\n            {this.renderSquare(38)}\n            {this.renderSquare(39)}\n            {this.renderSquare(40)}\n            {this.renderSquare(41)}\n          </div>\n          \n        </div>\n        </div>\n      );\n    }\n  }\n\n  class Game extends React.Component {\n    render() {\n      return (\n        <div>\n          <Nav></Nav>\n          <div className=\"game\">\n          <div className=\"game-board\">\n            <Board />\n          </div>\n        </div>\n        </div>\n      );\n    }\n  }\n\nfunction c4Winner(squares){\n    \n    for (let i = 0; i < winningArrays.length; i++) {\n        let a=winningArrays[i][0]\n        let b=winningArrays[i][1]\n        let c=winningArrays[i][2]\n        let d=winningArrays[i][3]\n        if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c] && squares[c] ===squares[d]) {\n          return squares[a];\n        }\n        else if(!squares.includes(null)) return \"TIE\"\n\n    }\n      return null;\n}\n  function miniMax1(human,ai,board,memo={},depth,Max){\n    \n      \n    if (depth in memo) return memo[depth]\n   \n   let res=c4Winner(board);\n   if (res!==null){\n     let score=res==human?100:res==ai?-100:0;\n     return score\n   }\n   \n  \n   \n   if(Max){\n     let best=-100\n     for (let i=0;i<42;i++){\n       if (board[i]==null && board[i+7]!==null){\n         board[i]=human;\n         var score=miniMax1(human,ai,board,memo,depth+1,false);\n         board[i]=null\n         best=Math.max(best,score);\n         memo[depth]=best\n         \n       }\n     }\n     return memo[depth]\n   }\n   else{\n     let best=100\n     for (let i=0;i<42;i++){\n       if(board[i]==null && board[i+7]!==null){\n         board[i]=ai;\n         var score=miniMax1(human,ai,board,memo,depth,true);\n         board[i]=null\n         best=Math.min(best,score);\n         memo[depth]=best\n\n       }\n     }\n     return memo[depth]\n     \n   }\n  }\n\n  export default Game;\n","/home/mrwez/Desktop/tictactoe/src/components/fullGame.js",[],"/home/mrwez/Desktop/tictactoe/src/components/five.js",["51"],"import React from 'react'\nimport Nav from './Nav'\n\nlet memo;\nfunction Square(props) {\n  return (\n    <button className={props.value===\"X\"?\"square colourR \": \"square colourB\"} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nconst initialState={squares:Array(25).fill(null),human:\"\",ai:\"\"}\n\nclass Board extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={...initialState}; //Prevents Mutation?!\n    \n  }\n  reset=this.reset.bind(this); //This is needed for reset\n\n  choosePlayer(e){\n    let player=e.target.value;\n    console.log(player)\n    e.target.value===\"X\"?this.setState({human:\"X\",ai:\"O\"}):this.setState({human:\"O\",ai:\"X\"})\n    let parentDiv=document.getElementById('choice')\n    console.log(parentDiv)\n    parentDiv.style.display=\"none\";\n}\n \n\n\n  \n\n  bestMove(board){\n    let bestScore=100;\n    let bestmove;\n    for (let i=0;i<25;i++){\n      if (board[i]==null){\n         board[i]=this.state.ai;\n         let score=miniMax1(this.state.human,this.state.ai,board,memo={},0,true);\n         board[i]=null;\n         if (score<bestScore){\n          bestmove=i\n          bestScore=score;\n          \n         }\n      }\n    }\n    board[bestmove]=this.state.ai;\n}\n\n  handleClick(i){\n    const sq=this.state.squares.slice()\n    if (sq[i]==null){\n      sq[i]=this.state.human\n    \n      this.setState({\n        squares:sq\n      })\n    setTimeout(this.bestMove(sq),500)\n    }\n    return;\n    \n  }\n  renderSquare(i) {\n   \n    return <Square value={this.state.squares[i]} onClick={()=>this.handleClick(i)} />;\n  }\n  reset(){\n    this.setState(initialState);\n    let parentDiv=document.getElementById('choice');\n    parentDiv.style.display=\"\";\n    \n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      console.log(winner);\n      status = <div className={winner===\"X\"?\"colourRWin\":\"colourBWin\"}>Winner!{winner}</div>\n    } \n\n    return (\n      <div className=\"container\">\n        <div className=\"status\">{status}</div>\n        <div className=\"choice\" id=\"choice\">\n            <h2>Choose a player</h2>\n            <button className=\"btn btn-danger\" value=\"X\" onClick={(e)=>this.choosePlayer(e)}>X</button>\n            <button className=\"btn btn-primary\" value=\"O\" onClick={(e)=>this.choosePlayer(e)}>O</button>\n        </div>\n        <button onClick={this.reset}>Reset</button>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n        </div>\n        <div className=\"board-row\">\n          \n          {this.renderSquare(5)}\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n          {this.renderSquare(9)}\n        </div>\n        <div className=\"board-row\">\n          \n          {this.renderSquare(10)}\n          {this.renderSquare(11)}\n          {this.renderSquare(12)}\n          {this.renderSquare(13)}\n          {this.renderSquare(14)}\n      \n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(15)}\n          {this.renderSquare(16)}\n          {this.renderSquare(17)}\n          {this.renderSquare(18)}\n          {this.renderSquare(19)}\n         \n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(20)}\n          {this.renderSquare(21)}\n          {this.renderSquare(22)}\n          {this.renderSquare(23)}\n          {this.renderSquare(24)}\n         \n        </div>\n        \n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = \n  \n    [ [4,9,14,19,24], //this seems to work better here instead of below?\n      [0, 1, 2, 3, 4],\n      [5,6, 7,8,9],\n      [10,11, 12 ,13, 14],\n      [15, 16, 17 ,18,19],\n      [20, 21 ,22 ,23,24],\n      [0,5,10,15,20],\n    [1,6,11,16,21],\n    [2,7,12,17,22],\n    [3,8,13,18,23],\n    [0,6,12,18,24],\n    [4, 8,12, 16,20]\n      \n    ];\n    \n    for (let i = 0; i < lines.length; i++) {\n      var [a, b, c, d, e] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c] && squares[c] ===squares[d] && squares[d]===squares[e]) {\n        return squares[a];\n      }\n      else if(!squares.includes(null)) return \"TIE\"\n    }\n    return null;\n  }\n function miniMax1(human,ai,board,memo={},depth,Max){\n   if (depth in memo) return memo[depth]\n  let res=calculateWinner(board);\n  if (res!==null){\n    let score=res===human?100:res===ai?-100:0;\n    return score\n  }\n  \n  if(Max){\n    let best=-100\n    for (let i=0;i<25;i++){\n      if (board[i]==null){\n        board[i]=human;\n        var score=miniMax1(human,ai,board,memo,depth+1,false);\n        board[i]=null\n        best=Math.max(best,score);\n        memo[depth]=best\n      }\n    }\n    return memo[depth]\n  }\n  else{\n    let best=100\n    for (let i=0;i<25;i++){\n      if(board[i]==null){\n        board[i]=ai;\n        let score=miniMax1(human,ai,board,memo,depth+1,true);\n        board[i]=null\n        best=Math.min(best,score);\n        memo[depth]=best\n      }\n    }\n    return memo[depth]\n    \n  }\n}\n\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div>\n        <Nav></Nav>\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default Game\n\n","/home/mrwez/Desktop/tictactoe/src/components/combos.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":59,"column":44,"nodeType":"58","messageId":"59","endLine":59,"endColumn":48},{"ruleId":"56","severity":1,"message":"57","line":49,"column":46,"nodeType":"58","messageId":"59","endLine":49,"endColumn":50},{"ruleId":"60","severity":1,"message":"61","line":180,"column":40,"nodeType":"62","messageId":"63","endLine":180,"endColumn":42},{"ruleId":"60","severity":1,"message":"61","line":180,"column":65,"nodeType":"62","messageId":"63","endLine":180,"endColumn":67},{"ruleId":"60","severity":1,"message":"61","line":293,"column":19,"nodeType":"62","messageId":"63","endLine":293,"endColumn":21},{"ruleId":"60","severity":1,"message":"61","line":293,"column":34,"nodeType":"62","messageId":"63","endLine":293,"endColumn":36},{"ruleId":"64","severity":1,"message":"65","line":318,"column":14,"nodeType":"58","messageId":"66","endLine":318,"endColumn":19},{"ruleId":"56","severity":1,"message":"57","line":42,"column":66,"nodeType":"58","messageId":"59","endLine":42,"endColumn":70},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'memo' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'score' is already defined.","redeclared","no-global-assign","no-unsafe-negation"]